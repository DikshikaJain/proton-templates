pipeline {
    agent  any
    options {
        buildDiscarder(logRotator(numToKeepStr: '5', daysToKeepStr: '14'))
        timestamps()
    }
    environment {
        AWS_DEFAULT_REGION="us-east-2"
    }
    stages{
        stage ('check config') {
            steps {
                script{
                  sh 'export isResourceDeleted $(cat .proton/deployment-metadata.json | jq .isResourceDeleted)'
                  sh 'aws proton notify-resource-deployment-status-change --resource-arn "arn:aws:proton:us-east-2:753690273280:environment/vpc-primary" --status IN_PROGRESS'
                }
            }   
        }
        stage ('terraform init') {
            steps {
                script{
                  sh 'terraform init'
                }
            }   
        }
        stage ('terraform plan') {
            steps {
                script{
                    sh 'terraform plan'
                }
            }
        }
        stage ('Approve terraform plan') {
            when{
                expression {
                    env.GIT_BRANCH == 'master'
                }
            }
            steps {
                script{
                     timeout(unit: 'MINUTES', time: 15){
                        approval=input(
                            id: 'confirm',
                            message: 'Apply Terraform'
                            parameters:[[
                                $class: 'BooleanParameterDefination'
                                defaultValue: false,
                                description: 'Apply Terraform',
                                name: 'Approved'
                            ]]
                         )
                     }

                    if(!approval){
                        currentBuild.result = 'ABORTED'
                        sh 'aws proton notify-resource-deployment-status-change --resource-arn "arn:aws:proton:us-east-2:753690273280:environment/vpc-primary" --status FAILED'
                        error("Terraform plan not approved, aborting")
                    }
                }
            }
        }
        stage ('terraform apply') {
            when{
                expression {
                    env.GIT_BRANCH == 'master'
                }
            }
            steps {
                script{
                    try{
                        sh 'terraform apply'
                        sh 'aws proton notify-resource-deployment-status-change --resource-arn "arn:aws:proton:us-east-2:753690273280:environment/vpc-primary" --status SUCCEEDED'
                    }catch(Exception e){
                        sh 'aws proton notify-resource-deployment-status-change --resource-arn "arn:aws:proton:us-east-2:753690273280:environment/vpc-primary" --status FAILED'
                    }
                }
            }
        }
    post { 
        always {
            script{
                   echo "build cleanup "
            }
        }
        success { 
              script {
                      sh '''
                       echo " build successfull "
                      '''
                }
        }
        failure {
            script {
                    
                sh '''
                    echo " build failed "
                '''
             }
        }
    }
    
}
